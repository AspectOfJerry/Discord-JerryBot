require('dotenv').config();
const fetch = require('window-fetch');

module.exports = {
    callback: async (message, Discord, client, ...args) => {
        //Command information
        const COMMAND_NAME = "ip_location";
        const REQUIRED_ROLE = "PL0";
        const EXCPECTED_ARGUMENTS = 1;
        const OPTIONAL_ARGUMENTS = 0;

        //Help command
        if(args[0] == '?') {
            const help_command = new Discord.MessageEmbed()
                .setColor('#BLUE')
                .setAuthor({name: "dir: ./commands/api/ipstack/ip_location.js; Lines: 127; File size: ~6.5 KB"})
                .setThumbnail(`${message.author.displayAvatarURL({dynamic: true, size: 32})}`)
                .setTitle(`%${COMMAND_NAME} command help (${REQUIRED_ROLE})`)
                .setDescription('This command shows location information about an IP adress.')
                .addField(`Usage`, "`" + `%${COMMAND_NAME}` + " <IP adress>" + "`", false)
                .addField(`Excpected arguments`, `${EXCPECTED_ARGUMENTS} case-sensitive`, true)
                .addField(`Optional arguments`, `${OPTIONAL_ARGUMENTS}`, true)
                .addField('Related commands', "`ping`", false)
                .setFooter({text: `${message.author.tag} • ${COMMAND_NAME}`, iconURL: message.author.displayAvatarURL({dynamic: true})})
                .setTimestamp();

            message.channel.send({embeds: [help_command]})
            return;
        }

        //Declaring variables
        let ipAdress;
        let ipAdressType;
        let ipAdressContinentCode;
        let ipAdressContinentName;
        let ipAdressCountryCode;
        let ipAdressCountryName;
        let ipAdressRegionCode;
        let ipAdressRegionName;
        let ipAdressCity;
        let ipAdressZipCode;
        let ipAdressLatitude;
        let ipAdressLongitude;
        let ipAdressCapital;

        //Declaring functions

        //Checks
        if(!message.member.roles.cache.find(role => role.name == REQUIRED_ROLE)) {
            const error_permissions = new Discord.MessageEmbed()
                .setColor('RED')
                .setThumbnail(`${message.author.displayAvatarURL({dynamic: true, size: 16})}`)
                .setDescription("I'm sorry but you do not have the permissions to perform this command. Please contact the server administrators if you believe that this is an error.")

            message.channel.send({embeds: [error_permissions]})
            return;
        }
        if(!args[0]) {
            const error_missing_arguments = new Discord.MessageEmbed()
                .setColor('RED')
                .setThumbnail(`${message.author.displayAvatarURL({dynamic: true, size: 16})}`)
                .setDescription(`**Error:** Excpected **${EXCPECTED_ARGUMENTS}** arguments but only provided **0**.` + " Use " + "`" + `%${COMMAND_NAME} ?` + "`" + " for help.")
                .setFooter({text: "Please provide an IP adress to search."})

            message.channel.send({embeds: [error_missing_arguments]})
            return;
        }
        ipAdress = args[0];

        //Code
        await fetch(`http://api.ipstack.com/${ipAdress}?access_key=${process.env.IPSTACK_API_KEY_JERRY}`)
            .then(response => response.json())
            .then(response => {
                if(String(response.success) == "false") {
                    let error_response_success = response.success;
                    let error_response_code = response.error.code;
                    let error_response_type = response.error.type;
                    let error_response_info = response.error.info;
                    const error_response = new Discord.MessageEmbed()
                        .setColor('RED')
                        .setAuthor({name: "Error"})
                        .setTitle("Response")
                        .setDescription("An error was returned from the API.")
                        .addField("Success", `${error_response_success}`, true)
                        .addField("Code", `${error_response_code}`, true)
                        .addField("Type", `${error_response_type}`, true)
                        .addField("Info", `${error_response_info}`, false)
                        .setFooter({text: `${message.author.tag} • Use '%${COMMAND_NAME} ?' for help`, iconURL: message.author.displayAvatarURL({dynamic: true})})
                        .setTimestamp();

                    message.channel.send({embeds: [error_response]})
                    return;
                }
                ipAdress = response.ip
                ipAdressType = response.type
                ipAdressContinentCode = response.continent_code;
                ipAdressContinentName = response.continent_name;
                ipAdressCountryCode = response.country_code;
                ipAdressCountryName = response.country_name;
                ipAdressRegionCode = response.region_code;
                ipAdressRegionName = response.region_name;
                ipAdressCity = response.city;
                ipAdressZipCode = response.zip;
                ipAdressLatitude = response.latitude;
                ipAdressLongitude = response.longitude;
                ipAdressCapital = response.location.capital;

                const ipAdressInfo = new Discord.MessageEmbed()
                    .setColor('GREEN')
                    .setThumbnail(`${message.author.displayAvatarURL({dynamic: true, size: 16})}`)
                    .setTitle('IP adress info')
                    .setDescription(`IP adress: ${ipAdress} (${ipAdressType})`)
                    .addField('IP Adress type', `${ipAdressType}`, true)
                    .addField('IP Adress continent', `${ipAdressContinentName} (${ipAdressContinentCode})`, true)
                    .addField('IP Adress country', `${ipAdressCountryName} (${ipAdressCountryCode})`, true)
                    .addField('IP Adress region', `${ipAdressRegionName} (${ipAdressRegionCode})`, true)
                    .addField('IP Adress capital', `${ipAdressCapital}`, true)
                    .addField('IP Adress city', `${ipAdressCity}`, true)
                    .addField('IP Adress longitude', `${ipAdressLongitude}`, false)
                    .addField('IP Adress latitude', `${ipAdressLatitude}`, false)
                    .addField('IP Adress zip', `${ipAdressZipCode}`)

                message.channel.send({embeds: [ipAdressInfo]})
            }).catch(console.error)
    }
}
